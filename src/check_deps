#!/usr/bin/env node

'use strict';

const pkgJSON = require('../package.json');
const shouldRun = Boolean(pkgJSON['_where']);

if (!shouldRun) return;

const path = require('path');
const $p = require('child_process');
const spawn = $p.spawn;

installModuleIfNecessary('semver', where, {
	onclose(err) {
		if (err) console.error(err);
		else checkDeps();
	}
});

function checkDeps() {
	const devDepMap = pkgJSON['devDependencies'] || {};
	const depMap = pkgJSON['dependencies'] || {};
	const deps = [].concat(Object.keys(devDepMap), Object.keys(depMap));

	const total = deps.length;
	let finished = 0;

	deps.forEach((dep) => {
		installModuleIfNecessary(dep, {
			onready(where) {
				console.log(`start to install ${dep} in ${where || __dirname} ...`);
			},
			onclose(error, installed) {
				finished += 1;
				if (installed) {
					console.log(`complete:  ${finished}/${total}\n\n`);
				} else {
					console.log(`${dep} already installed`);
				}
			}
		});
	});
}

function installModuleIfNecessary(moduleId, hooks) {
	const semver = require('semver');

	const projectDir = pkgJSON['_where'] || process.cwd();
	const devDepMap = pkgJSON['devDependencies'] || {};
	const depMap = pkgJSON['dependencies'] || {};

	let shouldInstall = true;
	let where = projectDir;

	try {
		const versionExisted = require(`${moduleId}/package.json`).version;
		const versionExpected = devDepMap[moduleId] || depMap[moduleId];

		// existed and the version satisfied.
		if (semver.satisfies(versionExisted, versionExpected) || /\.git$/.test(versionExpected)) {
			shouldInstall = false;
		} else {
			where = undefined;
		}
	} catch (err) {
	}

	hooks = normalizeHooks(hooks);

	if (!shouldInstall) {
		return hooks.onclose();
	}

	hooks.onready(where);

	installModule(moduleId, where, hooks);
}

function installModule(moduleId, dir, hooks) {
	if (typeof dir === 'object') {
		let temp = dir;
		dir = hooks;
		hooks = temp;
	}

	// hooks
	hooks = normalizeHooks(hooks);

	const install = spawn('npm', ['install', moduleId], {cwd: dir});
	const records = {};

	install.stdout.on('data', (data) => {
		console.log(`stdout: ${data}`);
		records.data = data;
		hooks.ondata(data);
	});
	install.stderr.on('data', (error) => {
		console.error(`stderr: ${error}`);
		records.error = error;
		hooks.onerror(error);
	});
	install.on('close', () => {
		console.log(`finish ${moduleId} installation\n`);
		hooks.onclose(records.error, records.data);
	});
}

function normalizeHooks(hooks) {
	hooks = hooks || {};
	return {
		onready: hooks.onready || noop,
		ondata: hooks.ondata || noop,
		onerror: hooks.onerror || noop,
		onclose: hooks.onclose || noop
	};
}

function noop(err) {
	if (err) console.error(err);
}
